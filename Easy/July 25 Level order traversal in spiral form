

/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */


//Function to return a list containing the level order traversal in spiral form.
vector<int> findSpiral(Node *root)
{
    //Your code here
    deque<pair<int,Node*>> q;
    q.push_back({0,root});
    vector<int> ans;
    int curr =0;
    while(!q.empty()){
        int level ;
        Node* node;
        if(curr & 1){
            if(q.front().first== curr)
            level = curr;
            else
            {
                ++curr;
                level = curr;
            }
        }
        else{
            if(q.back().first == curr)
            level = curr;
            else{
                ++curr;
                level = curr;
            }
        }
        if(curr & 1){
            tie(level,node) = q.front();
            q.pop_front();
        }
        else{
            tie(level,node) = q.back();
            q.pop_back();
        }
        ans.push_back(node ->data);
        if(level & 1){
            if(node ->left != nullptr)
            q.push_back({level+1, node ->left});
            if(node ->right != nullptr)
            q.push_back({level+1,node ->right});
        }
        else{
            if(node ->right!= nullptr)
            q.push_front({level+1,node ->right});
            if(node ->left != nullptr)
            q.push_front({level+1, node ->left});
        }
    }
    return ans;
}
